///	Toma el primer índice del array
///	@param {list} $list
///	@return {string}

@function first($list) {
	@return nth($list, 1);
}

///	Toma el último índice del array
///	@param {list} $list
///	@return {string}

@function last($list) {
	@return nth($list, length($list));
}

///	Convierte un valor expresado en `px` a `rem`
///	@param {string} $text-size
///	@return {string}

@function to-rem($text-size) {
	$split-text-size: str-slice($text-size, 1, -3);

	$text-to-rem: to-number(first($split-text-size)) / 16;
	@return #{$text-to-rem}rem;
}

///	Convierte un valor de tipo 'string' a 'number'
/// @param {string} $value
/// @return {number}

@function to-number($value) {
	@if type-of($value) == "number" {
		@return $value;
	} @else if type-of($value) != "string" {
		$_: log("El valor que recibe `to-number` debe ser de tipo `string` o `number`.");
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == "-";
	$numbers: (
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if not(index(map-keys($numbers), $character) or $character == ".") {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i));
		}

		@if $character == "." {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map-get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + map-get($numbers, $character) / $digits;
		}
	}

	@return if($minus, -$result, $result);
}